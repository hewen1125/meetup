worker_processes  1;

error_log  stderr alert;
error_log  logs/error.log info;

events {
    worker_connections  1024;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"'
					  '$request_time [$upstream_response_time]' ;

    access_log  logs/access.log main;

    set_real_ip_from   0.0.0.0/0;
    real_ip_header     X-Forwarded-For;
    real_ip_recursive  on;
    sendfile           on;

	upstream backend{
		server 1.2.3.4;
		balancer_by_lua_file src/balancer.lua;
		keepalive 60;
	}

 	lua_package_path './src/?.lua;./src/init.lua;./openresty/lualib/?/init.lua;./openresty/lualib/?.lua;;';
        lua_package_cpath './openresty/lualib/?.so;./openresty/lualib/?/?.so;./openresty/luajit/lib/?.so;;';

	lua_shared_dict list 1m;
    server {
        listen 8000;
        default_type "application/json; charset=utf-8";
        charset utf-8;
        client_body_buffer_size 5m;
        client_max_body_size 5m;

        chunked_transfer_encoding off;

        keepalive_disable none;
        keepalive_requests 10000000;
        keepalive_timeout 65s;

        lua_code_cache on;

        lua_socket_buffer_size 128k;
        lua_socket_connect_timeout 20s;
        lua_socket_read_timeout 65s;
        lua_socket_send_timeout 20s;

        location /semaphore {
            content_by_lua_file ./src/semaphore.lua;
        }
        location /shdict {
            content_by_lua_file ./src/shdict.lua;
        }
    }
 
	    server {
        # this is the real entry point
        listen 8080;

        location / {
            # make use of the upstream named "backend" defined above:
            proxy_pass http://backend/;
        }
    }

    server {
        listen 127.0.0.1:9000;
        location / {
            echo "upstream from port 9000...";
        }
    }
    server {
        listen 127.0.0.1:9001;
        location / {
            echo "upstream from port 9001...";
        }
    }

}

stream {
	# tcp echo server listening on port 1234
    server {
        listen 1234;
        content_by_lua_block {
            local sock = ngx.req.socket()
            while (true) do
                local line, err = sock:receive('*l')  -- read a line from downstream
				if not line then
					ngx.say(err)
					break
				elseif line == 'exit' then
                    ngx.say('bye')
                    break
                end
                ngx.say(line) -- output data
            end
        }
    }
	# ssl tcp echo server listen on port 4343
    server {
        listen 4343 ssl;
        ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers         AES128-SHA:AES256-SHA:RC4-SHA:DES-CBC3-SHA:RC4-MD5;
        ssl_certificate     ../ssl/ssl.pem;
        ssl_certificate_key ../ssl/ssl.key;
        ssl_session_cache   shared:SSL:10m;
        ssl_session_timeout 10m;
        content_by_lua_block {
            local sock = ngx.req.socket()
            while (true) do
                local line = sock:receive('*l')  -- read a line from downstream
                if line == 'exit' then
                    ngx.say('bye')
                    break
                end
                ngx.say(line) -- output data
            end
        }
    }
#unix domain socket server
    server {
        listen unix:/tmp/nginx.sock;
        content_by_lua_block {
            while (true) do
                local line = sock:receive('*l')  -- read a line from downstream
                if line == 'exit' then
                    ngx.say('bye')
                    break
                end
                ngx.say(line) -- output data
            end
        }
    }
}
